27/09/2023
Лутц Питон т2

Детали реализации класса

Оператор class создает объект.

class имя(суперкласс,...):
	атрибут = значение
	def метод(self, ...):
		self.атрибут = значение
class создает локальное пространство имен у этого объекта.

При выполнении кода class: выполняется весь код, формируется атрибуты класса при присваивании и атрибуты методов при операторах  def

вызов через экземпляр:

экземпляр. метод (аргументы. . .)

вызов через класс:

класс.метод(экземпляр, аргументы…)

__name__ имя класса

абстрактный суперкласс — класс, который от подклассов ждет свое поведение

Х = присваивание ( присваивает в локальной области, если не указан global)
X (ссылка в локальной области, не нашел то в функциях, глобальной области)

object.X = присваивание ( присваивание атрибута объекта)
object.X (ищет в объекте, классах выше)

__class__ - класс экземляра
__bases__ - суперклассы класс
__dict__ - пространство имен экземпляра

Резюме
Узнал о пространстве имен в классах, суперклассах, экземплярах класса, в модуле, в локальной видимости.
Узнал что значит атрибуты класса __class__, __bases__, __dict__, __doc__
узнал как обращаться к атрибутам класса через методы, напрямую, через наследование

В чем основные идеи:  создавать подклассы, которые делают свою логику действий с атрибутами

Как я могу применить изученное: я думаю, что это поможет при создании конвейеров в машинном обучении

Как новое вяжется с тем, что я уже знаю: можно проследить логику работы некоторых фреймворков
стр 118


















