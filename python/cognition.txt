27/09/2023
Лутц Питон т2

Детали реализации класса

Оператор class создает объект.

class ИмяСБольшойБуквы(суперкласс,...):
	атрибут = значение
	def метод(self, ...):
		self.атрибут = значение
class создает локальное пространство имен у этого объекта.

При выполнении кода class: выполняется весь код, формируется атрибуты класса при присваивании и атрибуты методов при операторах  def

вызов через экземпляр:

экземпляр. метод (аргументы. . .)

вызов через класс:

класс.метод(экземпляр, аргументы…)

__name__ имя класса

абстрактный суперкласс — класс, который от подклассов ждет свое поведение

Х = присваивание ( присваивает в локальной области, если не указан global)
X (ссылка в локальной области, не нашел то в функциях, глобальной области)

object.X = присваивание ( присваивание атрибута объекта)
object.X (ищет в объекте, классах выше)

__class__ - класс экземпляра
__bases__ - суперклассы класс
__dict__ - пространство имен экземпляра

Резюме
Узнал о пространстве имен в классах, суперклассах, экземплярах класса, в модуле, в локальной видимости.
Узнал что значит атрибуты класса __class__, __bases__, __dict__, __doc__
узнал как обращаться к атрибутам класса через методы, напрямую, через наследование

В чем основные идеи:  создавать подклассы, которые делают свою логику действий с атрибутами

Как я могу применить изученное: я думаю, что это поможет при создании конвейеров в машинном обучении

Как новое вяжется с тем, что я уже знаю: можно проследить логику работы некоторых фреймворков
стр 118


25.10.2023
Лутц Питон т2

__name__ и __class__ можно составить программу, чтоб показывал все классы и атрибуты

многостраничные комментарии писать в начале программы, в классах, в методах классов, функциях что делает эта часть кода
# писать на микроуровнях для ясности что и для его делается

модули:
реализуют пакеты данных или логики
создаются файлами кода программы
используются импортированием

классы:
реализуют новые полнофункциональные объекты
создаются оператором class
используют путем обращения к классам
всегда находятся внутри модуля

перегрузка операций
__init__ конструктор класса
__sub__  оператор вычитания
__del__ уничтожает объект(деструктор)
__add__ операция + X + Y; X += Y(если отсутствует __iadd__)
__or__ операция ИЛИ |   X | Y ; X |= Y (если отсутствует __ior__)
__repr__, __str__ вывод   print(X), repr(X), str(X)
__call__ вызов функции X(*args, **kwargs)
__getattr__ извлечение атрибута X.undefined
__setattr__ присваивание атрибуту X.any = value
__delattr__ удаление атрибута  del X.any
__getattribute__  извлечение атрибутов X.any
__getitem__ индексирование, срезы, итераия если нет __iter__ X[key], X[i:j]
__setitem__  присваивание по индексу, срезу X[key] = value; X[i:j] = iterable
__delitem__  удаление по индексу, срезу del X[key], X[i:j]
__len__  длина len(X)
__bool__ булевские проверки  bool(X)
__lt__  X<Y
__gt__   X>Y
__le__   X<=Y
__ge__   X>=Y
__eq__   X==Y
__ne__   X!=Y
__radd__  правосторонние операции Other + X
__iter__, __next__  итерация I = iter(X), next(X)
__contains__  проверка в членство item in X
__index__  целочисленное значение  hex, bin, oct
__enter__, __exit__  диспетчер контекста with obj as var:
__get__, __set__, __delete__   атрибуты дескриптора  X.attr, X.attr = value
__new__ создание класса перед __init__

__getitem__

def __getitem__(self, index):
	return self.dat[index]

индексирование и нарезание
при нарезании вызывает slice(start,stop,step)
__setitem__

def __setitem__(self,index,value):
	self.data[index] = value

присваивает по индексу или срезу

__getitem__ дает право также итерировать объект, проверять членство, вызов map, списковое включение

__iter__ __next__

проходит один раз по итератору, далее будет пусто

можно сделать проход много раз: применять к базам данных при итерации крупных выборок

резюме: Узнал о перегрузках операторов классов, об индексации и нарезание объектов класса
и об итерации объектов класса
В чем основные идеи:

Можно создавать  новые объекты на основе классов и задавать им логику при использование стандартных знаков и операторов

Как я могу применить изученное:
могу итерировать, нарезать сложные объекты на основе классов
Как новое вяжется с тем, что я уже знаю:
все возможно!!!
стр 139

06/12/2023
Лутц Питон т2


class Squares: #класс с 1 итератором
	def __init__(self, start, stop): # Сохранить состояние при создании
		self.value = start - 1
		self.stop = stop
	def __iter__(self): # Получить объект итератора при вызове iter
		return self
	def __next__(self): # Возвратить квадрат на каждой итерации
		if self.value == self.stop: # Также вызывается встроенной функцией next
			raise StopIteration
		self.value += 1
		return self.value ** 2

class SkipObject:#класс с множественными итераторами
	def __init__(self, wrapped): # Сохранить объект для использования
		self.wrapped = wrapped
	def __iter__(self):
		return Skipiterator(self.wrapped) # Каждый раз новый итератор
class Skipiterator:
	def __init__(self, wrapped):
		self.wrapped = wrapped # Информация о состоянии итератора
		self.offset = 0
	def __next__(self):
		if self.offset >= len(self.wrapped): # Прекратить итерацию
			raise StopIteration
		else:
			item = self.wrapped[self.offset] # Иначе возвратить и пропустить
			self.offset += 2
			return item

срезы создают новые объекты(slice)
итерируемые объекты выпускают по 1 значению за раз

метод iter с yield
class Squares: # Генератор на основе__ iter__ + yield
	def __init__(self, start, stop): # Метод__ next__ является
									# автоматическим/подразумеваемым
		self.start = start
		self.stop = stop
	def __iter__(self):
		for value in range(self.start, self.stop + 1):
			yield value ** 2

меньше кода по сравнению с прошлым классом, не надо создавать новый класс, так
как в генераторе уже есть метод next

__contains__
проверка в членство
вначале предпочитается __contains__, потом__iter__,следом __getitem__
def __contains__(self, x):
	print('contains : ’, end=’’)
	return x in self.data

__str__ и __repr__
__str__ сначала опробуется для операции print и встроенной функции str - отображение дружественное пользователю
__repr__ используется во всех остальных контекстах:
для эхо вывода в интерактивной подсказке
функция repr
print str если __str__ отсутствует

__str__ __repr__ должны возвратить строки
__str__ не может вернуть более крупные объекты, обратится к __repr__

__add__, __radd__
class Commuter1:#стандартное сложение
	def __init__(self, val):
		self.val = val
	def __add__(self, other):
		print('add', self.val, other)
		return self.val + other
	def __radd__(self, other):
		print('radd', self.val, other)
		return other + self.val

class Commuter2:
	def __init__(self, val):
		self.val = val
	def __add__(self, other):
		print("add", self.val, other)
		return self.val + other
	def __radd__(self, other):
		return self.__add__ (other) # Явно вызвать__add__
class Commuter3:
	def __init__(self, val):
		self.val = val
	def __add__(self, other):
		print("add", self.val, other)
		return self.val + other
	def __radd__(self, other):
		return self + other # Поменять местами и снова сложить
class Commuter4:
	def __init__(self, val):
		self.val = val
	def __add__(self, other):
		print("add", self.val, other)
		return self.val + other
	__radd__ = __add__

class Commuter5: # Распространение типа класса на результаты
	def __init__(self, val):
		self.val = val
	def __add__(self, other):
		#if isinstance(other, Commuter5): # Проверка типа во избежание вложенности объектов
		#	other = other.val
		return Commuter5(self.val + other) # Иначе результатом операции + является еще один Commuter5
	def __radd__(self, other):
		return Commuter5(other + self.val)
	def __str__(self):
		return "<Commuter5: %s>" % self.val

__call__
передача лубых позиционных и ключевых аргументов
class Callee:
	def __call__(self, *pargs, **kargs): # Перехватывает вызовы экземпляра
		print("Called:  ", pargs, kargs) # Принимает произвольные аргументы

class Prod:
	def __init__(self, value):
		self.value = value
	def __call__(self, other):
		return self.value ** other

Однако метод__ call__ может стать более полезным при взаимодействии с APIинтерфейсами (т.е. библиотеками)


Резюме:
уузнал как можно вручную итерировать объекты
итерация, проверка членства и срезы взаимосвязаны между собой
использование генераторов позволяет множественно итерировать объект
можно сложение справа заменить обычным сложением
В чем основные идеи:
использовать магические методы для реализации специфического поведения класса объекта
Как я могу применить изученное:

Как новое вяжется с тем, что я уже знаю:
стр 161

13.12.2023
Лутц Питон т2
class Callback:
	def __init__(self, color): # Функция информация о состоянии
		self.color = color
	def __call__(self): # Поддерживает вызовы без аргументов
		print("turn", self.color)
Запоминает состояние например кнопки при нажатии в Tkinter
# Обработчики
cbl = Callback('blue')
 # Запомнить blue
cb2 = Callback('green')
 # Запомнить green
Bl = Button(command=cbl)
 # Зарегистрировать обработчики
B2 = Button(command=cb2)


__bool__, __len__
если отсутсвует метод bool, то вызывает метод len
используется при if и bool
если не определены оба метода, то всегда True

__del__
обычно не используется, так как непредсказуемое поведение
все удалится самим "сборщиком мусора"

проектирование с использованием классов
наследование
class Employee:
	def __init__(self, name, salary=0):
		self.name = name
		self.salary = salary
	def giveRaise(self, percent):
		self.salary = self.salary + (self.salary * percent)
	def work(self):
		print(self.name, "does stuff")  # делает что-то
	def __repr__(self) :
		return "<Employee: name=%s, salary=%s>" % (self.name, self.salary)

class Chef(Employee):
	def __init__(self, name):
		Employee.__init__(self, name, 50000)
	def work(self):
		print(self.name, "makes food") # готовит еду

class Server(Employee):
	def __init__(self, name):
		Employee.__init__(self, name, 40000)
	def work(self):
		print(self.name, "interfaces with customer") # взаимодействует
													# с клиентом

class PizzaRobot(Chef):
	def __init__(self, name):
		Chef.__init__(self, name)
	def work(self):
		print(self.name, "makes pizza")# готовит пиццу

тестирвание
bob = PizzaRobot('bob')
print(bob)
bob.work()
bob.giveRaise(0.20)
print(bob)

композиция
совокупность внедреннных объектов
from employees import PizzaRobot, Server
class Customer:
	def __init__(self, name):
		self.name = name
	def order(self, server):
		print(self.name, "orders from", server) # заказы от
	def pay(self, server):
		print(self.name, "pays for item to", server) # плата за единицу

class Oven:
	def bake(self):
		print("oven bakes") # духовой шкаф выпекает

class PizzaShop:
	def __init__(self):
		self.server = Server("Pat") # Внедрить другие объекты
		self.chef = PizzaRobot("Bob") # Робот по имени bob
		self.oven = Oven()
	def order(self, name):
		customer = Customer(name) # Активизировать другие объекты
		customer.order(self.server)	# Заказы клиента, принятые официантом
		self.chef.work()
		self.oven.bake()
		customer.pay(self.server)

тестирование
scene = PizzaShop() # Создать составной объект
scene.order(’Homer') # Эмулировать заказ клиента Homer
print(’...’)
scene.order('Shaggy') # Эмулировать заказ клиента Shaggy

модуль pickle используется при сохранения данных и логики класса

делегирование: промежуточные объекты-оболочки
ведение журналов, проверка доступа, дополнительные шаги к интерфейсам

чтобы избежать конфликта имен принято использовать __(псевдозакрытые атрибуты)
__<атрибут или метод>
в питоне 3 вида метода уровня класса: методы экземпляра, статические методы(staticmethod), методы класса

проектирование функций , которые генерируют произвольные виды объектов нахывается фабрикой
def factory(aClass, *pargs, **kargs) : # Кортеж или словарь с переменным
										# количеством аргументов
	return aClass(*pargs, **kargs) # Вызывает aClass (или apply в Python 2.X)

class Spam:
	def doit(self, message):
		print(message)

class Person:
	def __ init__(self, name, job=None):
		self, name = name
		self. job = job

objectl = factory(Spam)
 # Создать объект Spam
object2 = factory (Person, "Arthur", "King")
 # Создать объект Person
objects = factory (Person, name= 'Brian')
 # Тоже самое, с ключевым аргументом и стандартным значением
стр193

Резюме:
узнал о патернах программирования: наследование(в каждом классе прописывается своя логика, "является"),
композиция(есть сборный класс, где все классы собираются и выполняют логику), делегирование(прописывается
отдельно проверки и тп), фабрика(одна функция генерирует создание объекта)
В чем основные идеи: в проектировании программы
Как я могу применить изученное: можно создать прогу согласно какому-нибудь паттерну
Как новое вяжется с тем, что я уже знаю: так создаются фреймворки








Резюме:
В чем основные идеи:
Как я могу применить изученное:
Как новое вяжется с тем, что я уже знаю:




