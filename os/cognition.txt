26.10.2023
Современная ОС

Процессы

Процесс -- абстракция, описывающая выполняющую программу

если ЦП один, то говорят о псевдопараллелизме -- аппаратный параллелизм

Многозадачный режим работы - постоянное переключение между процессами

у каждой программы есть логический счетчик команд, который встраивается в физический

Процесс -- программа(действий), входные и выходные данные, состояния

4 основные события, приводящие к созданию процессов:

инициализация системы
выполнение работающим процессом сист. вызовов, предназначенных для создания процесса(конвейерная обработка)
запрос пользователя на создание нового процесса
инициализация пакетного задания

Демон -- фоновый процесс, предназначенный для обработки какой либо активной деятельности

fork  -- в Linux точная копия родительского процесса
CreateProcess -- в Windows создает процесс, в него загружается программа

В родительском и дочернем процессе создаются 2 адресных пространства

завершение процесса в следующих обстоятельствах:
обычный выход(добровольно)
выход при возникновение ошибки(добровольно)
возникновение фатальной ошибки (принудительно)
уничтожения другим процессом(принудительно)


В linux вызов exit, Windows -- ExitProcess

при начальной загрузке Unix системы специальный процесс ini, который порождает
1 процесс на каждый терминал

в Windows все процессы равнозначные

3 состояния, в котором находится процесс:

выполняемый(в данный момент использующий процессор)
готовый(работоспособный, но временно приостановленный, чтобы дать возможность выполнение другому процессу)
заблокированный(неспособный выполняться, пока не возникнет какое-нибудь внешнее событие) системный вызов pause

для реализации модели процессов ОС ведет таблицу процессов

управление процессом: регистры, счетчики команд, слово  состояние программы, указатель стека, состояние процесса,
приоритет, параметры планирования, идентификатор процесса, родительский процесс, группа процесса, сигналы, время за-
пуска процесса, использованное время процессора, время процессора, использованное дочерними процессами, время след аварийного сигнала

управление памятью: указатель на информацию о текстовом сегменте, указатель на информацию о сегменте данных, указатель
на информацию о сегменте стека

управление файлами: корневой каталог, рабочий каталог, дескрипторы файлов, идентификатор пользователя, идентификатор
группы

потоки(thread)

потоки - это мини-процессы в самом процессе, которые используют общее адресное пространство
потоки создаются удаляются быстро
поток выполнения есть счетчик команд, отслеживающий, какую очередную инструкцию выполнить, есть регистры, в которых содержится текущие рабочие переменные, есть стек с протоколом выполнения
Стандарт IEEE 1003.1c
пакет Pthreads
Функции Pthreads: pthread_create, pthread_exit, pthread_join, pthread_yield, pthread_attr_init, pthread_attr_destroy

у каждого потока есть идентификатор, набор регистров и набор атрибутов

Резюме
Узнал что такое процессы и потоки и чем они отличаются
В чем основные идеи:
поток - это мини процесс, который работает в области адресного пространства процесса и управляет действиями
намного быстрее
Как я могу применить изученное:
можно создать простой процесс и поток
Как новое вяжется с тем, что я уже знаю:
множество процессов управляется ОС



09.11.2023
Современная ОС

набор потоков в пользовательском пространстве
у каждого процесса есть собственная таблица потоков, аналог таблицы процессов ядра
проблема блокирующие системные вызовы, пока 1 поток не уступит ЦП, то другой не приступит к выполнению

набор потоков в ядре
в ядре есть таблица процессов и таблица потоков
минусы: долгая обработка ядром потоков

гибридная реализация
использование потока ядра , затем несколько потоков на уровне пользователя, в рамках всех или несколько потоков
на уровне ядра

всплывающий поток создается в ядре заново и не имеют прошлого, быстро обрабатывают

Превращение однопоточного процесса в многпоточный
создается для каждого потока область видимости
проблемы с сигналами

Взаимодействие процессов(потоков)
состязательная ситуация: когда 2 процесса считывают или записывают общие данные, а результат только у одного процесса
решение: взаимное исключение - если один процесс пользуеться общим, то другой процесс не может




















