23,10,23 
Введение в алгебру

Что такое построение об удвоение куба и трисекция угла сделано
Нельзя построить циркулем и линейкой удвоение куба и трисекции угла
В современных обозначениях задача сводится к решению уравнения
X^3=2a^3
Решение имеет вид
x=a{\sqrt[ {3}]2}.
Всё сводится к проблеме построения отрезка длиной {\sqrt[ {3}]{2}}

Группы Галуа?

Аналитическая формула числа Фибоначчи

(1+sqrt(5))/2)^n - (1-sqrt(5))/2)^n
___________________________________
                sqrt(5)
число Пелля

(1+sqrt(2))^n - (1-sqrt(2))^n
___________________________________
                2*sqrt(2)

13,11,23
Введение в алгебру

НОД и НОК

Эффективными способами вычисления НОД двух чисел являются алгоритм Евклида и бинарный алгоритм.
Бинарный алгоритм Евклида
 То есть скорость бинарных сдвигов дает эффект только для чисел близких друг другу.
свойства НОД
 НОД(2m, 2n) = 2 НОД(m, n),
НОД(2m, 2n+1) = НОД(m, 2n+1),
НОД(-m, n) = НОД(m, n)

алгоритм
1.НОД(0, n) = n; НОД(m, 0) = m;НОД(m, m) = m;
2.НОД(1, n) = 1; НОД(m, 1) = 1;
3.Если m, n чётные, то НОД(m, n) = 2*НОД(m/2, n/2);
4.Если m чётное, n нечётное, то НОД(m, n) = НОД(m/2, n);
5.Если n чётное, m нечётное, то НОД(m, n) = НОД(m, n/2);
6.Если m, n нечётные и n > m, то НОД(m, n) = НОД(m, (n-m)/2);
7.Если m, n нечётные и n < m, то НОД(m, n) = НОД((m-n)/2, n);
Алгоритм требует O(n) шагов, где n — количество битов в большем из двух чисел
Для произвольных чисел асимптотическая сложность этого алгоритма составляет O(n²)
Это ограничение снижается до O(n² / log₂ n), предполагая, что (входные) числа могут быть представлены в памяти (абстрактной) машины,

Алгори́тм Евкли́да
Для данного алгоритма существует множество теоретических и практических применений. В частности, он является основой
для криптографического алгоритма с открытым ключом RSA[4], широко распространённого в электронной коммерции. Также алгоритм
используется при решении линейных диофантовых уравнений[5], при построении непрерывных дробей[6], в методе Штурма[7].
Алгоритм Евклида является основным инструментом для доказательства теорем в современной теории чисел, например таких
как теорема Лагранжа о сумме четырёх квадратов[8] и основная теорема арифметики[9].

соотношение Безу
Пусть a,b — целые числа, хотя бы одно из которых не ноль. Тогда существуют такие целые числа
x,y, что выполняется соотношение
НОД(a,b)= x*a + y*b

Цепные дроби
Алгоритм Евклида достаточно тесно связан с цепными дробями
Отношение a/b допускает представление в виде цепной дроби:
частные от теоремы евклида

При этом цепная дробь без последнего члена равна отношению коэффициентов Безу
t/s, взятому со знаком минус

Оценка сложности алгоритма вычисляется как произведение количества шагов на время выполнения одного шага.
Она показывает, что алгоритм Евклида растёт квадратично O(h2), где h — среднее число цифр в двух начальных числах a и b в десятичной записи

Наименьшее общее кратное (НОК) двух целых чисел m и n — это наименьшее натуральное число, которое делится на m и n (без остатка).

Основное свойство: наибольший общий делитель m и n делится на любой общий делитель этих чисел.
Пример: для чисел 12 и 18 наибольший общий делитель равен 6; он делится на все общие делители этих чисел: 1, 2, 3, 6.
Следствие 1: множество общих делителей m и n совпадает с множеством делителей НОД(m, n).
Следствие 2: множество общих кратных m и n совпадает с множеством кратных НОК(m, n).
Если m делится на n, то НОД(m, n) = n. В частности, НОД(n, n) = n.
НОД(a,b)=НОД(a-b,b)В общем случае, если a=b*q+c, где a,b,c,q – целые числа, то НОД(a,b)=НОД(b,c).
НОД(a*m,a*n)=|a|* НОД(m,n) — общий множитель можно выносить за знак НОД.
Если D=НОД(m,n), то после деления на D числа становятся взаимно простыми, то есть, НОД(m/D, n/D)=1. Это означает, в частности,
что для приведения дроби к несократимому виду надо разделить её числитель и знаменатель на их НОД.
Мультипликативность: если a1,a2 взаимно просты, то: НОД(a1*a2,b)=НОД(a1,b)*НОД(a2,b)
Наибольший общий делитель чисел m и n может быть определён как наименьший положительный элемент множества всех их линейных комбинаций:
(m,n) представим в виде линейной комбинации чисел

НОД(m,n)=u*m+v*n.
Это соотношение называется соотношением Безу, а коэффициенты u и v — коэффициентами Безу. Коэффициенты Безу эффективно вычисляются
расширенным алгоритмом Евклида.


Основная теорема арифметики

Каждое натуральное число раскладывается в произведение простых множителей, и притом однозначно с точностью до их перестановки
Следствие. Любая линейная комбинация 2 чисел пропорциональна НОД.
Лемма. пусть a*b делится нацело на c, НОД(a,c)=1. Тогда b делится нацело на c.
решение степенных уравнениях в целых числах. пусть a1,a2,...,ak целые положительные числа, попарно взаимно простые(для любых i,j НОД(ai,aj)=1)
дано: a1*a2*...*ak = b^r
тогда для любого i ai=bi^r, где bi - некоторые целые числа.


Простые числа
Решето Эратосфена

Вход: натуральное число n
Выход: все простые числа от 2 до n.

Пусть A — булевый массив, индексируемый числами от 2 до n,
изначально заполненный значениями true.

 для i = 2, 3, 4, ..., пока i^2 ≤ n:
  если A[i] = true:
    для j = i^2, i^2 + i, i^2 + 2i, ..., пока j ≤ n:
      назначить A[j] := false

 возвращаем: все числа i, для которых A[i] = true.


Решето Аткина

Описание
Основная идея алгоритма состоит в использовании неприводимых квадратичных форм (представление чисел в виде ax2 + by2).
Предыдущие алгоритмы в основном представляли собой различные модификации решета Эратосфена, где использовалось
представление чисел в виде редуцированных форм (как правило, в виде произведения xy).

В упрощённом виде алгоритм может быть представлен следующим образом:

Все числа, равные (по модулю 60) 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
42, 44, 46, 48, 50, 52, 54, 56 или 58, делятся на 2 и поэтому заведомо не простые. Все числа, равные
(по модулю 60) 3, 9, 15, 21, 27, 33, 39, 45, 51 или 57, делятся на 3 и тоже не являются простыми. Все числа,
равные (по модулю 60) 5, 25, 35 или 55, делятся на 5 и также не простые. Все эти остатки (по модулю 60) игнорируются.

Все числа, равные (по модулю 60) 1, 13, 17, 29, 37, 41, 49 или 53, имеют остаток от деления на 4, равный 1.
Эти числа являются простыми тогда и только тогда, когда количество решений уравнения 4x2 + y2 = n нечётно и
само число не кратно никакому квадрату простого числа (en:square-free integer).

Числа, равные (по модулю 60) 7, 19, 31, или 43, имеют остаток от деления на 6, равный 1. Эти числа являются
простыми тогда и только тогда, когда количество решений уравнения 3x2 + y2 = n нечётно и само число не кратно никакому квадрату простого.

Числа, равные (по модулю 60) 11, 23, 47, или 59, имеют остаток от деления на 12, равный 11. Эти числа
являются простыми тогда и только тогда, когда количество решений уравнения 3x2 − y2 = n (для x > y) нечётно
и само число n не кратно никакому квадрату простого.

Отдельный шаг алгоритма вычёркивает числа, кратные квадратам простых чисел. Так как ни одно из рассматриваемых
чисел не делится на 2, 3, или 5, то, соответственно, они не делятся и на их квадраты. Поэтому проверка, что
число не кратно квадрату простого числа, не включает 2^2, 3^2, и 5^2.

на с++

int limit = 1000;
int sqr_lim;
bool is_prime[1001];
int x2, y2;
int i, j;
int n;

// Инициализация решета
sqr_lim = (int)sqrt((long double)limit);
for (i = 0; i <= limit; ++i)
    is_prime[i] = false;
is_prime[2] = true;
is_prime[3] = true;

// Предположительно простые — это целые с нечётным числом
// представлений в данных квадратных формах.
// x2 и y2 — это квадраты i и j (оптимизация).
x2 = 0;
for (i = 1; i <= sqr_lim; ++i) {
    x2 += 2 * i - 1;
    y2 = 0;
    for (j = 1; j <= sqr_lim; ++j) {
        y2 += 2 * j - 1;

        n = 4 * x2 + y2;
        if ((n <= limit) && (n % 12 == 1 || n % 12 == 5))
            is_prime[n] = !is_prime[n];

        // n = 3 * x2 + y2;
        n -= x2; // Оптимизация
        if ((n <= limit) && (n % 12 == 7))
            is_prime[n] = !is_prime[n];

        // n = 3 * x2 - y2;
        n -= 2 * y2; // Оптимизация
        if ((i > j) && (n <= limit) && (n % 12 == 11))
            is_prime[n] = !is_prime[n];
    }
}

// Отсеиваем кратные квадратам простых чисел в интервале [5, sqrt(limit)].
// (основной этап не может их отсеять)
for (i = 5; i <= sqr_lim; ++i) {
    if (is_prime[i]) {
        n = i * i;
        for (j = n; j <= limit; j += n)
            is_prime[j] = false;
    }
}

// Вывод списка простых чисел в консоль.
printf("2, 3, 5");
for (i = 6; i <= limit; ++i) {  // добавлена проверка делимости на 3 и 5. В оригинальной версии алгоритма потребности в ней нет.
    if ((is_prime[i]) && (i % 3 != 0) && (i % 5 !=  0))
        printf(", %d", i);
}
переписать на Питон

Тест Бейли — Померанца — Селфриджа — Уогстаффа

Тест Бейли — Померанца — Селфриджа — Уогстаффа (БПСВ, BPSW) — вероятностный алгоритм проверки на простоту, который определяет,
является число составным или вероятно простым.

Пусть n — нечётное натуральное число, которое необходимо проверить на простоту.

По желанию[уточнить] провести перебор простых делителей, меньших заданной верхней границы, и проверить, является ли число
полным квадратом. Если найден простой множитель или число является полным квадратом, проверка завершена - число не простое.
Произвести сильную проверку на простоту по основанию 2. Если n не является сильно вероятно простым по основанию 2, то n
является составным; на этом проверка завершается.
Найти первое D в последовательности 5, −7, 9, −11, 13, −15, …, для которого символ Якоби (D/n) равен −1. Положим P=1 и Q=(1-D)/4}.
Выполнить сильный тест Люка на простоту с параметрами D,P,Q. Если n не является сильно вероятно простым, то n является составным;
на этом проверка заканчивается. В противном случае, n с высокой вероятностью является простым.
Комментарии:

Первый этап лишь повышает эффективность. Тест БПСВ работает и без этого шага, однако, если n имеет небольшие простые делители,
то самый быстрый способ показать, что n является составным — найти такой делитель серией проверок.
На втором этапе однократно применяется тест Миллера — Рабина на простоту. Выбор основания не влияет на эффективность
конкретной проверки. Однако, многочисленные исследования показали, что сочетание сильного теста на простоту именно
по основанию 2 и сильного теста Люка на простоту показывает хорошие результаты в проверке чисел на простоту.
Бейли и Уогстафф доказали[4], что среднее количество D, которое необходимо перебрать, примерно равно 3,147755149.
Если n является полным квадратом, то на этапе 3 никогда не найдется D, такое что (D/n)=-1}; однако, это не станет проблемой,
поскольку полные квадраты легко обнаружить при помощью метода Ньютона для квадратных корней. Если на шаге 3 не удается найти D
за короткое время, следует проверить, является ли n полным квадратом.
Для заданного n существуют и другие методы подбора коэффициентов. Важно то, что символ Якоби (D/n)} должен
быть равен −1. Брессон и Вэгон доказали, что для эффективности тестирования символ Якоби должен быть равен −1, а значение
Q≠±1.

четные и нечетные перестановки

Теорема
1.1.
Число различных перестановок из n чисел равно произведению 1·2·3· ...·n, обозначаемому n! (читается: "эн факториал").
Определение 1.2. Говорят, что в данной перестановке числа i и j составляют инверсию, если i>j, но i стоит в этой перестановке раньше j.
Определение 1.3. Перестановка называется четной, если ее числа составляют четное число инверсий, и нечетной – в противоположном случае.
Определение 1.4. Преобразование в перестановке, при котором мы поменяем местами какие-либо два символа (необязательно стоящие рядом), а
все остальные символы оставим на месте, называется транспозицией.
Теорема 1.2.
Все n! перестановок из n символов можно расположить втаком порядке, что каждая следующая будет получаться из предыдущей одной
транспозицией, причем начинать можно с любой перестановки.
Теорема 1.3. Всякая транспозиция меняет четность перестановки.
Определение 1.5. Всякое взаимно однозначное отображение A множества первых n натуральных чисел на себя называется подстановкой n-ой степени.

11.12.23
Введение в алгебру

аксиомы Пеано
1. 0 является натуральным числом.
2. Число, следующее за натуральным, тоже является натуральным.
3. 0 не следует ни за каким натуральным числом.
4. Если натуральное число a непосредственно следует как за числом b, так и за числом c, то b и c совпадают.
5. (Аксиома индукции) Если какое-либо предложение доказано для 0 (база индукции) и если из допущения, что оно верно для натурального числа n,
вытекает, что оно верно для следующего за n натурального числа (индукционное предположение), то это предложение верно для всех натуральных чисел.

как доказывать математической индукцией
Итак, общая схема доказательства по индукции такова. Есть некоторая последовательность утверждений (A1,A2, . . . ,An, . . . ). Мы доказываем, что
очередное утверждение (An) верно, считая известным, что все предыдущие утверждения (Ak при k < n) верны. Это позволяет нам утверждать, что все
утверждения An верны.
Такой способ рассуждение называется математической индукцией, а величина n называется параметром индукции. Говорят, что мы доказываем
утверждение An индукцией по n.
